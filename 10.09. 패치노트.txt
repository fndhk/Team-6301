✨ 새로 추가된 스크립트
GameSession.cs
역할: 씬(Scene)이 바뀌어도 파괴되지 않고 유지되는 '데이터 전달자'입니다.

주요 기능: 플레이어가 선택한 스테이지 정보(selectedStage)와 현재 사용 중인 세이브 슬롯 번호(currentSaveSlot)를 저장하여 다른 씬으로 전달합니다.

StageData.cs
역할: 각 스테이지의 고유 정보(스테이지 번호, 이름, 등장할 적 웨이브 등)를 담는 '설계도' 파일입니다.

주요 기능: Scriptable Object로 구현하여, 코드를 수정하지 않고 유니티 에디터에서 스테이지를 쉽게 추가하거나 난이도를 조절할 수 있습니다.

StageSelectManager.cs
역할: 새로 추가된 StageSelect 씬의 모든 UI와 로직을 관리합니다.

주요 기능:

좌/우 화살표로 스테이지를 넘기는 스크롤 UI 기능.

클리어한 스테이지, 잠긴 스테이지, 최고 점수 등을 UI에 표시.

스테이지 버튼 클릭 시 GameSession에 정보를 기록하고 GameScene으로 이동시키는 역할.

StageButtonUI.cs
역할: 스테이지 선택 버튼 프리팹에 붙는 도우미 스크립트입니다.

주요 기능: 버튼 내부의 various Text, Image 등 UI 요소들의 참조를 직접 들고 있어 StageSelectManager가 쉽게 접근할 수 있게 해줍니다.

ScoreManager.cs
역할: 게임 점수 계산을 전담하는 관리자입니다.

주요 기능: {(적 점수) * (거리)} * (남은 체력 %) 공식에 따라 점수를 누적하고, 최종 점수를 계산하는 기능을 담당합니다.

✏️ 변경된 스크립트
MainMenuUI.cs
'새 게임' 및 '불러오기' 방식이 크게 변경되었습니다.

이제 '새 게임'과 '불러오기' 버튼 모두 슬롯 선택창을 엽니다.

플레이어는 '새 게임'을 시작할 때 어느 슬롯에 데이터를 만들지 직접 선택할 수 있습니다.

이를 위해 슬롯 선택창의 모드(불러오기/새 게임)를 구분하는 로직이 추가되었습니다.

GameData.cs
저장 데이터 구조가 확장되었습니다.

playerLevel이 삭제되고, 스테이지 잠금 해제에 사용될 highestClearedStage가 추가되었습니다.

스테이지별 최고 점수를 저장하는 stageHighScores가 추가되었습니다.

GameManager.cs
스테이지 클리어 및 다음 단계 진행 로직이 추가되었습니다.

StageClear() 함수: 스테이지 클리어 시 ScoreManager를 통해 최종 점수를 계산하고, GameData를 갱신(최고 클리어 스테이지, 최고 점수)한 뒤, 올바른 슬롯에 게임을 저장합니다.

클리어 UI(StageClearPanel)를 활성화하고 게임 시간을 멈춥니다.

'다음 스테이지', '다시하기', '스테이지 선택' 버튼에 연결될 함수들(OnClickNextStage 등)이 구현되었습니다.

Awake() 함수: GameScene이 시작될 때마다 적 카운트(Enemy.liveEnemyCount)를 초기화하여 '유령 적' 버그를 해결했습니다.

EnemySpawner.cs
더 이상 자체적으로 웨이브 데이터를 갖지 않습니다.

게임 시작 시 GameSession으로부터 현재 스테이지의 StageData를 받아와, 그 안에 정의된 웨이브대로 적을 소환합니다.

모든 웨이브 소환이 끝나고, 맵의 모든 적이 처치되었는지(Enemy.liveEnemyCount <= 0)를 감지하여 GameManager에게 클리어 신호를 보내는 기능이 추가되었습니다.

Enemy.cs
적마다 다른 점수를 부여할 수 있는 scoreValue 변수가 추가되었습니다.

클리어 조건을 확인하기 위해 현재 살아있는 적의 수를 추적하는 public static int liveEnemyCount 변수가 추가 및 관리됩니다.

Projectile.cs
점수 계산을 위해 자신을 발사한 타워의 정보를 기억하도록 수정되었습니다.

적이 명중했을 때, ScoreManager에게 적의 점수와 타워까지의 거리를 전달하여 점수 계산을 요청합니다.

Tower.cs
Shoot() 함수가 수정되어, 발사하는 투사체(Projectile)에게 자신의 transform 정보를 넘겨주도록 변경되었습니다.

CoreFacility.cs
점수 계산 시 '남은 체력 보너스'를 적용하기 위해, 현재 체력 비율을 반환하는 GetCurrentHealthPercentage() 함수가 추가되었습니다.

NicknameSetupUI.cs
닉네임 설정 후, StageSelect 씬으로 이동하도록 경로가 수정되었습니다.

-------------------------------------------------------------------------------------------------------------------------

팀원을 위한 개발 가이드
## 📝 새로운 스테이지를 추가하거나 수정하고 싶을 때
🗣️ "3 스테이지 다음에 4 스테이지를 만들고 싶어."
🗣️ "2 스테이지에 나오는 적의 순서를 바꾸고 싶어."

이 작업은 코드를 거의 건드리지 않고, 유니티 에디터 내에서 할 수 있습니다.

StageData 에셋 파일 (in Assets/Resources/StageData): 가장 핵심적인 파일입니다.

새 스테이지 추가: Stage_3.asset 파일을 복제(Ctrl+D)해서 Stage_4.asset을 만듭니다. 그 다음, Inspector 창에서 Stage Index를 4로 바꾸고, Waves 목록을 수정하여 원하는 적과 수량을 설정하면 됩니다.

기존 스테이지 수정: 수정하고 싶은 스테이지의 에셋 파일(예: Stage_2.asset)을 선택하고, Inspector 창에서 Waves 목록을 자유롭게 변경하면 됩니다.

## 👿 새로운 종류의 적(Enemy)을 추가하고 싶을 때
🗣️ "원거리 공격을 하는 새로운 해골 마법사를 추가하고 싶어."

새로운 적 프리팹(Prefab) 제작:

유니티 에디터에서 적의 이미지를 가진 게임 오브젝트를 만듭니다.

Enemy.cs 스크립트를 붙여넣고, Inspector 창에서 speed, maxHealth, scoreValue 등 세부 능력치를 설정합니다. (필요하다면 Enemy.cs를 수정해서 새로운 공격 로직을 추가해야 합니다.)

이 오브젝트를 Project 창으로 드래그하여 프리팹으로 만듭니다.

StageData 에셋 파일:

새로 만든 적 프리팹을 스테이지에 투입시키기 위해, 원하는 StageData 에셋의 Waves 목록에 있는 Enemy Prefab 슬롯에 드래그하여 추가합니다.

## 平衡 게임 밸런스(능력치)를 조절하고 싶을 때
🗣️ "darkman1이 너무 약해서 체력을 올리고 싶어."
🗣️ "타워의 공격 속도를 약간 빠르게 하고 싶어."

이 작업은 대부분 코드 수정 없이, 프리팹의 Inspector 창에서 이루어집니다.

적 프리팹 (예: darkman1.prefab): 적 프리팹을 선택하고 Inspector 창의 Enemy (Script) 컴포넌트에서 Max Health, Speed, Attack Damage 등의 값을 직접 수정합니다.

타워 프리팹: 타워 프리팹을 선택하고 Inspector 창의 Tower (Script) 컴포넌트에서 Attack Range, Fire Rate, Base Damage 등의 값을 직접 수정합니다.

## ✨ 새로운 아이템이나 버프를 추가하고 싶을 때
🗣️ "모든 적을 잠시 멈추는 아이템을 만들고 싶어."

ItemData 에셋 파일: Project 창에서 Create → Inventory → Item을 통해 새로운 아이템의 기본 정보(이름, 아이콘, 효과 종류 등)를 담은 에셋 파일을 만듭니다.

TowerManager.cs (또는 새로운 Manager): ApplyBuff 함수에 새로운 효과 종류(EffectType)를 처리하는 else if 구문을 추가하고, 실제 버프 효과를 주는 코루틴(Coroutine)을 새로 작성해야 합니다.

## ↔️ UI나 게임 흐름을 변경하고 싶을 때
🗣️ "메인 메뉴에 '설정' 버튼을 추가하고 싶어."
🗣️ "스테이지 클리어 시 점수 외에 다른 보상도 보여주고 싶어."

MainMenuUI.cs: 메인 메뉴의 버튼 기능이나 UI 로직을 수정할 때 사용합니다.

StageSelectManager.cs: 스테이지 선택 화면의 UI나 로직을 수정할 때 사용합니다.

GameManager.cs: GameScene 내에서 발생하는 주요 이벤트(스테이지 클리어, 게임 오버, 재시작 등)의 흐름을 제어할 때 사용합니다.

## 💾 저장할 데이터를 추가하고 싶을 때
🗣️ "플레이어의 골드(재화)도 저장하고 싶어."

GameData.cs: 저장하고 싶은 새로운 데이터(예: public int playerGold;)를 이 파일에 추가합니다.

SaveLoadManager.cs: 이 파일은 거의 수정할 필요가 없습니다. GameData에 변수를 추가하는 것만으로도 대부분 자동으로 저장/불러오기가 처리됩니다.

데이터를 변경하는 로직 추가: 게임 내에서 골드를 얻거나 사용할 때 SaveLoadManager.instance.gameData.playerGold 값을 변경하는 코드를 관련 스크립트에 추가해야 합니다.